import os
import asyncio
import threading
import time
from flask import Flask, request, jsonify
from flask_cors import CORS
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ConversationHandler, ContextTypes
from functions import save_application_to_sheets, send_telegram_notification, ask_openai_assistant, validate_phone
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# === Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ===
app = Flask(__name__)
CORS(app, resources={r"/*": {"origins": "*", "methods": ["GET", "POST", "OPTIONS"], "allow_headers": ["Content-Type", "Authorization"]}})

# === Telegram Bot ===
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
application = Application.builder().token(TELEGRAM_BOT_TOKEN).connect_timeout(30).read_timeout(30).write_timeout(30).build()

# === –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler ===
CHOOSING, TYPING_NAME, TYPING_PHONE, TYPING_SERVICE, TYPING_DATE, TYPING_MASTER = range(6)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
service_keyboard = ReplyKeyboardMarkup([
    ['–°—Ç—Ä–∏–∂–∫–∞', '–û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ'],
    ['–ú–∞–Ω–∏–∫—é—Ä'],
    ['–û—Ç–º–µ–Ω–∞']
], resize_keyboard=True)

main_keyboard = ReplyKeyboardMarkup([
    ['–ë—ã—Å—Ç—Ä–∞—è –∑–∞–ø–∏—Å—å'],
    ['–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è'],
], resize_keyboard=True)

# === –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è OpenAI Assistant ===
user_histories = {}  # user_id: [messages]
user_data = {}  # user_id: {form_data}
HISTORY_LIMIT = 30

def extract_user_data(messages):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    data = {}
    for msg in messages:
        if msg["role"] == "user":
            content = msg["content"].lower()
            original_content = msg["content"]
            
            # –£—Å–ª—É–≥–∞ (—Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞) - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ü–ï–†–í–û–ô
            if not data.get('–£—Å–ª—É–≥–∞') and any(service in content for service in ['–º–∞–Ω–∏–∫—é—Ä', '–æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ', '—Å—Ç—Ä–∏–∂–∫–∞', '–ø–æ–¥—Å—Ç—Ä–∏—á—å—Å—è', '—Ö–æ—á—É']):
                data['–£—Å–ª—É–≥–∞'] = original_content
            
            # –¢–µ–ª–µ—Ñ–æ–Ω (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, 7-15 —Å–∏–º–≤–æ–ª–æ–≤)
            elif not data.get('–¢–µ–ª–µ—Ñ–æ–Ω') and original_content.isdigit() and 7 <= len(original_content) <= 15:
                data['–¢–µ–ª–µ—Ñ–æ–Ω'] = original_content
            
            # –î–∞—Ç–∞ (—Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Å—è—Ü)
            elif not data.get('–î–∞—Ç–∞') and any(month in content for month in ['—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è', '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è']):
                data['–î–∞—Ç–∞'] = original_content
            
            # –ú–∞—Å—Ç–µ—Ä (—Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞)
            elif not data.get('–ú–∞—Å—Ç–µ—Ä') and any(role in content for role in ['—Å—Ç–∏–ª–∏—Å—Ç', '—Ç–æ–ø-—Å—Ç–∏–ª–∏—Å—Ç', '–∞—Ä—Ç-–¥–∏—Ä–µ–∫—Ç–æ—Ä', '–≤–µ–¥—É—â–∏–π']):
                data['–ú–∞—Å—Ç–µ—Ä'] = original_content
            
            # –ò–º—è (—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª–∏–Ω–æ–π –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤, –Ω–µ —Ü–∏—Ñ—Ä—ã, –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —É—Å–ª—É–≥)
            elif not data.get('–ò–º—è') and len(original_content) <= 50 and not original_content.isdigit() and not any(char.isdigit() for char in original_content) and not any(service in content for service in ['–º–∞–Ω–∏–∫—é—Ä', '–æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ', '—Å—Ç—Ä–∏–∂–∫–∞', '–ø–æ–¥—Å—Ç—Ä–∏—á—å—Å—è', '—Ö–æ—á—É']):
                data['–ò–º—è'] = original_content
            
            # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö)
            elif not data.get('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π') and (content in ['–Ω–µ—Ç', '–±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤', '–Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤', '–Ω—Ç–µ'] or '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏' in content):
                data['–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'] = original_content
    
    print(f"–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    return data

async def try_save_application(user_id, source="Web"):
    """–ü—ã—Ç–∞–µ—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞—è–≤–∫—É, –µ—Å–ª–∏ —Å–æ–±—Ä–∞–Ω—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        history = user_histories.get(user_id, [])
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        data = extract_user_data(history)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        required_fields = ['–ò–º—è', '–¢–µ–ª–µ—Ñ–æ–Ω', '–£—Å–ª—É–≥–∞', '–î–∞—Ç–∞', '–ú–∞—Å—Ç–µ—Ä']
        if all(field in data for field in required_fields):
            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            data['–ò—Å—Ç–æ—á–Ω–∏–∫'] = source
            if '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π' not in data:
                data['–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'] = '–Ω–µ—Ç'
                
            print(f"–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: {data}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets
            save_application_to_sheets(data)
            print(f"‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {data}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
            notification_text = f"üéâ –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê!\n\n–ò–º—è: {data['–ò–º—è']}\n–¢–µ–ª–µ—Ñ–æ–Ω: {data['–¢–µ–ª–µ—Ñ–æ–Ω']}\n–£—Å–ª—É–≥–∞: {data['–£—Å–ª—É–≥–∞']}\n–î–∞—Ç–∞: {data['–î–∞—Ç–∞']}\n–ú–∞—Å—Ç–µ—Ä: {data['–ú–∞—Å—Ç–µ—Ä']}\n–ò—Å—Ç–æ—á–Ω–∏–∫: {data['–ò—Å—Ç–æ—á–Ω–∏–∫']}"
            await send_telegram_notification(notification_text)
            
            # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            user_histories[user_id] = []
            
            return True, "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
        return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}"
    
    return False, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö"

# === Flask endpoint –¥–ª—è –≤–µ–±-–≤–∏–¥–∂–µ—Ç–∞ (Tilda) ===
@app.route('/webchat', methods=['GET'])
def webchat_page():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–µ–±-—á–∞—Ç–∞"""
    return '''
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ß–∞—Ç —Å —Å–∞–ª–æ–Ω–æ–º –∫—Ä–∞—Å–æ—Ç—ã</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 600px;
            margin: 50px auto;
            padding: 20px;
            background-color: #f5f5f5;
        }
        .chat-container {
            background: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .chat-messages {
            height: 400px;
            overflow-y: auto;
            border: 1px solid #ddd;
            padding: 15px;
            margin-bottom: 15px;
            border-radius: 5px;
            background-color: #fafafa;
        }
        .message {
            margin-bottom: 15px;
            padding: 10px;
            border-radius: 10px;
            max-width: 80%;
        }
        .user-message {
            background-color: #007bff;
            color: white;
            margin-left: auto;
            text-align: right;
        }
        .bot-message {
            background-color: #e9ecef;
            color: #333;
        }
        .input-container {
            display: flex;
            gap: 10px;
        }
        #messageInput {
            flex: 1;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
        }
        #sendButton {
            padding: 10px 20px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }
        #sendButton:hover {
            background-color: #0056b3;
        }
        .loading {
            color: #666;
            font-style: italic;
        }
    </style>
</head>
<body>
    <div class="chat-container">
        <h2>üíÑ –ß–∞—Ç —Å —Å–∞–ª–æ–Ω–æ–º –∫—Ä–∞—Å–æ—Ç—ã ArtBeauty</h2>
        <div class="chat-messages" id="chatMessages">
            <div class="message bot-message">
                –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥–∏ –Ω–∞—à–µ–≥–æ —Å–∞–ª–æ–Ω–∞ –∏–ª–∏ –æ—Ç–≤–µ—á—É –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?
            </div>
        </div>
        <div class="input-container">
            <input type="text" id="messageInput" placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..." />
            <button id="sendButton">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
        </div>
    </div>

    <script>
        const chatMessages = document.getElementById('chatMessages');
        const messageInput = document.getElementById('messageInput');
        const sendButton = document.getElementById('sendButton');

        function addMessage(text, isUser = false) {
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${isUser ? 'user-message' : 'bot-message'}`;
            messageDiv.textContent = text;
            chatMessages.appendChild(messageDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        // –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π ID –¥–ª—è —Å–µ—Å—Å–∏–∏
        let sessionId = localStorage.getItem('webchat_session_id');
        if (!sessionId) {
            sessionId = 'web_' + Date.now();
            localStorage.setItem('webchat_session_id', sessionId);
        }

        async function sendMessage() {
            const message = messageInput.value.trim();
            if (!message) return;

            addMessage(message, true);
            messageInput.value = '';
            sendButton.disabled = true;
            sendButton.textContent = '–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è...';

            try {
                const response = await fetch('/webchat', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        message: message,
                        user_id: sessionId
                    })
                });

                const data = await response.json();
                
                if (data.answer) {
                    addMessage(data.answer);
                } else {
                    addMessage('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞:', error);
                addMessage('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            } finally {
                sendButton.disabled = false;
                sendButton.textContent = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å';
                messageInput.focus();
            }
        }

        sendButton.addEventListener('click', sendMessage);
        messageInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });

        messageInput.focus();
    </script>
</body>
</html>
    '''

@app.route('/webchat', methods=['POST'])
def webchat():
    try:
        print("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –∫ /webchat")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        data = request.get_json()
        if not data:
            print("–ù–µ—Ç JSON –¥–∞–Ω–Ω—ã—Ö")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
            return jsonify({"error": "No JSON data"}), 400
            
        user_id = data.get('user_id', 'web')
        user_message = data.get('message', '')
        
        print(f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {user_message}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        
        if not user_message:
            print("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
            return jsonify({"error": "No message provided"}), 400
            
        history = user_histories.get(user_id, [])
        history.append({"role": "user", "content": user_message})
        history = history[-HISTORY_LIMIT:]
        
        # –ü—Ä–æ–±—É–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
        saved, save_message = asyncio.run(try_save_application(user_id))
        if saved:
            print(f"‚úÖ {save_message}")
        
        print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É...")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        answer = ask_openai_assistant(history)
        print(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {answer}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        
        history.append({"role": "assistant", "content": answer})
        user_histories[user_id] = history
        
        return jsonify({"answer": answer})
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ /webchat: {e}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        return jsonify({"error": str(e)}), 500

# === Telegram Handlers ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –±–æ—Ç–æ–º"""
    await update.message.reply_text(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –±–æ—Ç-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
        reply_markup=main_keyboard
    )
    return CHOOSING

async def handle_service_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏"""
    user_message = update.message.text
    
    if user_message == '–ë—ã—Å—Ç—Ä–∞—è –∑–∞–ø–∏—Å—å':
        await update.message.reply_text(
            "–ö–∞–∫ —è –º–æ–≥—É –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è? –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è.",
            reply_markup=ReplyKeyboardRemove()
        )
        return TYPING_NAME
    elif user_message == '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è' or user_message.lower() != '–±—ã—Å—Ç—Ä–∞—è –∑–∞–ø–∏—Å—å':
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        user_id = str(update.effective_user.id)
        history = user_histories.get(user_id, [])
        history.append({"role": "user", "content": user_message})
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç OpenAI Assistant
            print(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É: {user_message}")
            answer = ask_openai_assistant(history)
            print(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {answer}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
            history.append({"role": "assistant", "content": answer})
            user_histories[user_id] = history
            
            await update.message.reply_text(
                answer,
                reply_markup=main_keyboard
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
            await update.message.reply_text(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–ë—ã—Å—Ç—Ä–∞—è –∑–∞–ø–∏—Å—å' –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Å–ª—É–≥—É.",
                reply_markup=main_keyboard
            )
        return CHOOSING
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é.",
            reply_markup=main_keyboard
        )
        return CHOOSING

async def handle_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏ –∑–∞–ø—Ä–æ—Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    user_data[update.effective_user.id] = {'name': update.message.text}
    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 79XXXXXXXXX"
    )
    return TYPING_PHONE

async def handle_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∑–∞–ø—Ä–æ—Å —É—Å–ª—É–≥–∏"""
    phone = update.message.text
    if not validate_phone(phone):
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 79XXXXXXXXX"
        )
        return TYPING_PHONE
    
    user_data[update.effective_user.id]['phone'] = phone
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
        reply_markup=service_keyboard
    )
    return TYPING_SERVICE

async def handle_service(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —É—Å–ª—É–≥–∏ –∏ –∑–∞–ø—Ä–æ—Å –¥–∞—Ç—ã"""
    user_message = update.message.text
    if user_message == '–û—Ç–º–µ–Ω–∞':
        await update.message.reply_text(
            "–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞. –ß–µ–º –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å?",
            reply_markup=main_keyboard
        )
        return CHOOSING
    
    if user_message not in ['–°—Ç—Ä–∏–∂–∫–∞', '–û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ', '–ú–∞–Ω–∏–∫—é—Ä']:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤",
            reply_markup=service_keyboard
        )
        return TYPING_SERVICE
    
    user_data[update.effective_user.id]['service'] = user_message
    await update.message.reply_text(
        "–ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è? (–Ω–∞–ø—Ä–∏–º–µ—Ä, '15 —Å–µ–Ω—Ç—è–±—Ä—è')",
        reply_markup=ReplyKeyboardRemove()
    )
    return TYPING_DATE

async def handle_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã –∏ –∑–∞–ø—Ä–æ—Å –º–∞—Å—Ç–µ—Ä–∞"""
    user_data[update.effective_user.id]['date'] = update.message.text
    await update.message.reply_text(
        "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ (–µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π, –Ω–∞–ø–∏—à–∏—Ç–µ '–ª—é–±–æ–π')"
    )
    return TYPING_MASTER

async def handle_master(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""
    user_id = update.effective_user.id
    user_data[user_id]['master'] = update.message.text
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    data = {
        '–ò–º—è': user_data[user_id]['name'],
        '–¢–µ–ª–µ—Ñ–æ–Ω': user_data[user_id]['phone'],
        '–£—Å–ª—É–≥–∞': user_data[user_id]['service'],
        '–î–∞—Ç–∞': user_data[user_id]['date'],
        '–ú–∞—Å—Ç–µ—Ä': user_data[user_id]['master'],
        '–ò—Å—Ç–æ—á–Ω–∏–∫': 'Telegram',
        '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π': '–Ω–µ—Ç'
    }
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets
        save_application_to_sheets(data)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        notification_text = f"üéâ –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê!\n\n–ò–º—è: {data['–ò–º—è']}\n–¢–µ–ª–µ—Ñ–æ–Ω: {data['–¢–µ–ª–µ—Ñ–æ–Ω']}\n–£—Å–ª—É–≥–∞: {data['–£—Å–ª—É–≥–∞']}\n–î–∞—Ç–∞: {data['–î–∞—Ç–∞']}\n–ú–∞—Å—Ç–µ—Ä: {data['–ú–∞—Å—Ç–µ—Ä']}\n–ò—Å—Ç–æ—á–Ω–∏–∫: {data['–ò—Å—Ç–æ—á–Ω–∏–∫']}"
        await send_telegram_notification(notification_text)
        
        await update.message.reply_text(
            f"–û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∞ –∑–∞–ø–∏—Å—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞:\n"
            f"–ò–º—è: {data['–ò–º—è']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['–¢–µ–ª–µ—Ñ–æ–Ω']}\n"
            f"–£—Å–ª—É–≥–∞: {data['–£—Å–ª—É–≥–∞']}\n"
            f"–î–∞—Ç–∞: {data['–î–∞—Ç–∞']}\n"
            f"–ú–∞—Å—Ç–µ—Ä: {data['–ú–∞—Å—Ç–µ—Ä']}\n\n"
            f"–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏!",
            reply_markup=main_keyboard
        )
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
        await update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_keyboard
        )
    
    return CHOOSING

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
conv_handler = ConversationHandler(
    entry_points=[CommandHandler('start', start)],
    states={
        CHOOSING: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_service_choice)],
        TYPING_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_name)],
        TYPING_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_phone)],
        TYPING_SERVICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_service)],
        TYPING_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_date)],
        TYPING_MASTER: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_master)],
    },
    fallbacks=[CommandHandler('start', start)]
)

application.add_handler(conv_handler)

def run_flask():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Flask —Å–µ—Ä–≤–µ—Ä"""
    app.run(host='0.0.0.0', port=5000)

def run_telegram():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram –±–æ—Ç–∞"""
    try:
        application.run_polling(allowed_updates=Update.ALL_TYPES, drop_pending_updates=True)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {str(e)}")
        print("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
        time.sleep(5)
        run_telegram()  # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = threading.Thread(target=run_flask)
    flask_thread.start()
    
    print("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    print("–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("–û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –≤ Telegram –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    run_telegram()