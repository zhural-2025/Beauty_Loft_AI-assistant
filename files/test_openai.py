#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenAI Assistant
"""

import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def test_openai_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI"""
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenAI...")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    openai_api_key = os.getenv('OPENAI_API_KEY')
    openai_assistant_id = os.getenv('OPENAI_ASSISTANT_ID')
    
    if not openai_api_key:
        print("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
        return False
    
    if not openai_assistant_id:
        print("‚ùå OPENAI_ASSISTANT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
        return False
    
    print(f"‚úÖ OPENAI_API_KEY: {openai_api_key[:20]}...")
    print(f"‚úÖ OPENAI_ASSISTANT_ID: {openai_assistant_id}")
    
    # –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å OpenAI
    try:
        import openai
        print("‚úÖ OpenAI –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ OpenAI: {e}")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install openai")
        return False
    
    # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç
    try:
        client = openai.Client(api_key=openai_api_key)
        print("‚úÖ OpenAI –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        return False
    
    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–µ
    try:
        assistant = client.beta.assistants.retrieve(openai_assistant_id)
        print(f"‚úÖ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω: {assistant.name}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {e}")
        return False
    
    # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å thread –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        # –°–æ–∑–¥–∞–µ–º thread
        thread = client.beta.threads.create()
        print("‚úÖ Thread —Å–æ–∑–¥–∞–Ω")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = client.beta.threads.messages.create(
            thread_id=thread.id,
            role="user",
            content="–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"
        )
        print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º assistant
        run = client.beta.threads.runs.create(
            thread_id=thread.id,
            assistant_id=openai_assistant_id
        )
        print("‚úÖ Run –∑–∞–ø—É—â–µ–Ω")
        
        # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        import time
        while True:
            run_status = client.beta.threads.runs.retrieve(
                thread_id=thread.id,
                run_id=run.id
            )
            if run_status.status == 'completed':
                break
            elif run_status.status == 'failed':
                print(f"‚ùå Run failed: {run_status.last_error}")
                return False
            time.sleep(1)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
        messages = client.beta.threads.messages.list(thread_id=thread.id)
        if messages.data:
            answer = messages.data[0].content[0].text.value
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {answer[:100]}...")
        else:
            print("‚ùå –û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {e}")
        return False
    
    print("=" * 50)
    print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã OpenAI –ø—Ä–æ–π–¥–µ–Ω—ã!")
    return True

if __name__ == "__main__":
    success = test_openai_connection()
    exit(0 if success else 1)
